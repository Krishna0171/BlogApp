// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(uuid()) @db.Uuid
  name             String    @db.VarChar(20)
  email            String    @unique @db.VarChar(50)
  password         String?   @db.VarChar(255)
  role             String    @default("user") @db.VarChar(20)
  resetToken       String?   @map("reset_token") @db.VarChar(255)
  resetTokenExpiry DateTime? @map("reset_token_expiry")

  createdAt DateTime @default(now()) @map("created_at")
  createdBy String?  @map("created_by") @db.Uuid
  updatedAt DateTime @default(now()) @map("updated_at")
  updatedBy String?  @map("updated_by") @db.Uuid
  isDeleted Boolean  @default(false) @map("is_deleted")

  createdByUser User? @relation("UserCreatedBy", fields: [createdBy], references: [id])
  updatedByUser User? @relation("UserUpdatedBy", fields: [updatedBy], references: [id])

  createdUsers User[]    @relation("UserCreatedBy")
  updatedUsers User[]    @relation("UserUpdatedBy")
  Posts        Post[]
  Sessions     Session[]

  @@map("users")
}

model Post {
  id         String  @id @default(uuid()) @db.Uuid
  title      String  @db.VarChar(100)
  content    String
  authorId   String  @map("author_id") @db.Uuid
  isFavorite Boolean @default(false) @map("is_favorite")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  isDeleted Boolean  @default(false) @map("is_deleted")

  author User @relation(fields: [authorId], references: [id])

  @@map("posts")
}

model Session {
  id           String   @id @default(uuid())
  userId       String   @map("user_id") @db.Uuid
  refreshToken String   @map("refresh_token") @db.VarChar(255)
  userAgent    String?  @map("user_agent") @db.VarChar(255)
  ipAddress    String?  @map("ip_address") @db.VarChar(255)
  expiresAt    DateTime @map("expires_at")
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  isDeleted Boolean  @default(false) @map("is_deleted")

  user User @relation(fields: [userId], references: [id])

  @@map("sessions")
}
